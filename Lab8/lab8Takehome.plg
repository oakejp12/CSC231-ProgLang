/* Johan Oakes
	Lab 8 - Intro to Prolog
	3/26/15
*/


/* Facts about who's male */

male(william).
male(billy).
male(johan).
male(ken).
male(alan).
male(ashley).
male(sam).

/* Facts about who's female */
female(susan).
female(laura).
female(darling).
female(mary).
female(michelle).
female(shelly).
female(bobbie).
female(elizabeth).
female(karon).
female(sharon).
female(mae).


/* Facts describing parent, child relationships */ 
parent(william,billy).
parent(william,laura).
parent(susan,billy).
parent(susan,laura).
parent(ken, johan).
parent(ken, darling).
parent(ken, bobbie).
parent(ken, shelly).
parent(ken, michelle).
parent(ken, amy).
parent(mae, mary).
parent(mae, ken).
parent(alan, ashley).
parent(alan, elizabeth).
parent(mary, amy).
parent(mary, michelle).
parent(mary, shelly).
parent(mary, johan).
parent(mary, darling).
parent(karon, sharon).


/* A definition for siblings - share the same parent */
siblings(X,Y) :- parent(Z,X), parent(Z,Y), X \= Y.

/* A definition for mother - a female parent */
mother(X,Y) :- parent(X,Y), female(X).

/* Alternate definitions for grandmother (mother's mother or father's mother). */
grandmother(X,Y) :- mother(X,Z), mother(Z,Y).
/* Can't use the next entry because I haven't yet defined father */
/* grandmother(X,Y) :- mother(X,Z), father(Z,Y). */
/* Recursive definition of ancestor */
ancestor(X,Y) :- parent(X,Y).
ancestor(X,Y) :- parent(X,Z),ancestor(Z,Y).

/* Definition for father */
father(X,Y) :- parent(X,Y), male(X).

/* Definition for daughter */
daughter(X, Y) :- female(X), parent(Y, X).

/* Definition for son */
/* Son is the male, Y is the parent */
son(X, Y) :- male(X), parent(Y, X).

/* Definition for sister */
/* Sister can't be a sister to herself */
sister(X, Y) :- siblings(X, Y), female(X), X \= Y.

/* Definition for brother */
/* Brother can't be a brother to himself */
brother(X, Y) :- siblings(X, Y), male(X), X \= Y.

/* Definition for G'pa */ 
grandfather(X, Y) :- father(X, Z), father(Z, Y).
grandfather(X, Y) :- father(X, Z), mother(Z, Y).


/* Definition for aunt */
aunt(X, Y) :- sister(X, Z), mother(Z, Y).
aunt(X, Y) :- sister(X, Z), father(Z, Y).

/* Definition for unclde */
uncle(X, Y) :- brother(X, Z), father(Z, Y).
uncle(X, Y) :- brother(X, Z), mother(Z, Y).

/* Definition for cousin */
cousin(X, Y) :- parent(X, Z), uncle(Z, Y).
cousin(X, Y) :- parent(X, Z), aunt(Z, Y).


/* Problem 2 */

/* isnatural(X) : X is a natural number if X = 0, or if X is > 0 
	and X-1 is a natural number */
isnatural(0). /* If X = 0 */ 
isnatural(X) :- X > 0, Y is X - 1, isnatural(Y).

/* factorial(A,B) :  If A is 0, B is 1. For any number A > 0, B is the result of
 multiplying A times the result of computing the factorial of A-1. */
factorial(0, 1). /* If A is 0, B is 1 */
factorial(A,B) :- A > 0, C is A - 1, factorial(C, J), B is A * J.


/* fibonacci(A,B) : If A is 0 or 1,B is 1. For any number A > 1, 
	B is the sum of the results from calling fibonacci on A-1 and fibonacci on A-2. */
fibonacci(0,1).
fibonacci(1,1).
fibonacci(A,B) :- A > 1, C is A - 1, J is A - 2, fibonacci(C, N), fibonacci(J, G), B is N + G.


/* Problem 3 */ 

/* taken(Student, Dept, CourseNumber) */

/* Math Courses to fulfill major */
math(X) :- 
taken(X, math, 112), 
taken(X, math, 117), 
optionalReq(X).

/* optionalReq is chosen from 121, 205, 206 of required math courses */
optionalReq(X) :- 
taken(X, math, 121).
optionalReq(X) :- 
taken(X, math, 205).
optionalReq(X) :- 
taken(X, math, 206).

/* Pick the essential CS courses */
csCore :- 
taken(X, cs, 111), 
taken(X, cs, 112), 
taken(X, cs, 211), 
taken(X, cs, 221), 
taken(X, cs, 222),
taken(X, cs, 231),
taken(X, cs, 241), 
taken(X, cs, 399).

/* Define the level 300 and above courses for student != 399 */
csMore(X) :- 
taken(X, cs, A), 
taken(X, cs, B), 
taken(X, cs, C), 
taken(X, cs, D), 
A > 299, B > 299, C > 299,  /* Represent 300 and above */
A \= 399, B \= 399, C \= 399,  /* 399 is already listed */
A \= B, A \= C, B \= C. 

/* taken(Student, Dept, CourseNumber) */
/* studentA has taken enough courses! */
taken(studentA,cs,111).
taken(studentA,cs,112).
taken(studentA,cs,211).
taken(studentA,cs,221).
taken(studentA,cs,222).
taken(studentA,cs,231).
taken(studentA,cs,241).
taken(studentA,math,112).
taken(studentA,math,117).
taken(studentA,math,121).
taken(studentA,cs,391).
taken(studentA,cs,385).
taken(studentA,cs,343).
taken(studentA,cs,341).
taken(studentA,cs,399).


/* studentB sucks and hasn't fulfilled the requirements */
taken(studentB,cs,111).
taken(studentB,cs,112).
taken(studentB,cs,221).
taken(studentB,cs,222).
taken(studentB,cs,241).
taken(studentB,math,111).
taken(studentB,math,112).
taken(studentB,math,205).

/* Neither has studentC */
taken(studentC,cs,241).
taken(studentC,cs,111).
taken(studentC,math, 111).
taken(studentC,math, 205).
taken(studentC,math,121).


/* fulfilledCSMajor(Student) */
fulfilledCSMajor(X) :- math(X), csCore(X), csMore(X).





